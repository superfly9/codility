/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */


 var maxOperations = function(nums, k) {
    nums.sort((a,b)=>a-b);
    let left=0;
    let right =nums.length-1;
    let count = 0;
    while (left < right) {
        const sum = nums[left] + nums[right]
        if (sum === k) {
            count++;
            left++;
            right--;
        } else if (sum < k) {
            left++;
        } else {
            right--;
        }
    }
    return count;
};

var maxOperations = function(nums, k) {
    let freqMap = new Map();
    let operations = 0;

    for(let num of nums){
        let complement = k - num;

        if(freqMap.get(complement) > 0) {
            // If the complement exists, perform an operation
            operations++;
            // Decrease the frequency of the complement
            freqMap.set(complement, freqMap.get(complement) - 1);
        } else {
            // otherwise, increase the frequency of num
            freqMap.set(num, (freqMap.get(num) || 0) + 1);
        }
    }

    return operations;
};